---
- name: Install default nginx configuration
  template: src=nginx-default.conf
            dest=/etc/nginx/nginx.conf
            owner=root
            group=root
            mode=0644
  notify:
    - reload-nginx
  tags:
    - web-server

- name: Disable default website
  file: state=absent
        dest=/etc/nginx/sites-enabled/default
  notify:
    - reload-nginx
  tags:
    - web-server

- name: Create www root directory
  file: state=directory
        dest={{ web_root }}/{{ hostname }}
        owner={{ web_user }}
        group={{ web_user }}
        mode=0755
  tags:
    - web-server

# There is not enough memory on staging to minify and merge the static assets.
# We just copy everything in the static/ directory. To use the minified versions
# we better run the node.js command locally and upload the file.
- name: Copy static assests (for staging)
  command: rsync -a -u --delete {{ install_base }}/{{ hostname }}/app/dashboard/static/ {{ web_root }}/{{ hostname }}/static
  when: ansible_lsb.id == "Ubuntu"
  tags:
    - web-server
    - app

- name: Build static assets
  command: nodejs {{ install_base }}/{{ hostname }}/app/dashboard/static/js/lib/r.js -o {{ install_base }}/{{ hostname }}/app/dashboard/static/js/build.js
  when: ansible_lsb.id == "Debian"
  tags:
    - web-server
    - app

- name: Fix assets permissions
  file: path=/tmp/assets-build
        state=directory
        recurse=yes
        owner={{ app_user }}
        group={{ app_user }}
  when: ansible_lsb.id == "Debian"
  tags:
    - web-server
    - app

- name: Copy static assets
  command: rsync -a -u --delete /tmp/assets-build/ {{ web_root }}/{{ hostname }}/static
  when: ansible_lsb.id == "Debian"
  tags:
    - web-server
    - app

- name: Install frontend nginx configuration
  template: src=kernelci-frontend.conf
            dest=/etc/nginx/sites-available/{{ hostname }}
            owner=root
            group=root
            mode=0644
  notify:
    - reload-nginx
  tags:
    - web-server

- name: Enable frontend website
  file: state=link
        src=/etc/nginx/sites-available/{{ hostname }}
        dest=/etc/nginx/sites-enabled/{{ hostname }}
        owner=root
        group=root
  tags:
    - web-server

- name: Install local nginx configuration
  copy: src=nginx-local.conf
        dest=/etc/nginx/conf.d/nginx-local.conf
        owner=root
        group=root
        mode=0644
  notify:
    - reload-nginx
  tags:
    - web-server

- name: Install nginx upstream definitions
  template: src=frontend-upstreams.conf
            dest=/etc/nginx/conf.d/frontend-upstreams.conf
            mode=0644
            owner=root
            group=root
  notify:
    - reload-nginx
  tags:
    - web-server

- name: Install uwsgi configuration file
  template: src=kernelci-frontend.ini
            dest=/etc/uwsgi/apps-available/kernelci-frontend.ini
            owner=root
            group=root
            mode=0644
  notify:
    - reload-uwsgi
  tags:
    - web-server

- name: Enable uwsgi frontend application
  file: state=link
        src=/etc/uwsgi/apps-available/kernelci-frontend.ini
        dest=/etc/uwsgi/apps-enabled/kernelci-frontend.ini
        owner=root
        group=root
  notify:
    - reload-uwsgi
  tags:
    - web-server
